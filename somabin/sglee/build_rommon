#! /bin/csh -f

# ===============================================================================
# Set up variables.
# ===============================================================================
set clean_day     = "Thu"
set bld_host      = "potlicker"
set do_sup_clean  = `date +%a`
set do_create_dir = "TRUE"
set do_depend     = "TRUE"
set do_product    = "TRUE"

if ( $#argv == 0 ) then
    set yymmdd   = `date +%y%m%d`
else
    set yymmdd   = $1
endif

# Determine build priority and how many CPU's to use.
set nice_time  = 17
if ( `date +%H` < ${nice_time} ) then
    set nice_val = "+9"
    set cpu_val  = "-j4"
else 
    set nice_val = "+2" 
    set cpu_val  = "-j6"
endif

if ( `uname -n` == "${bld_host}" ) then
    set work_dir = "/cscpu/core_release"
else
    set work_dir = "/nfs/cscpu/core_release"
endif
set tftp_path  = "/tftpboot/core_release"

set branch     = "ELC_branch"
set tree       = "${work_dir}/ELC"
set arch_dir   = "${work_dir}/Archives"
set sun_dir    = "${work_dir}/suns"
set sym_dir    = "${work_dir}/symbols"
set out        = "${work_dir}/Builds/build.${yymmdd}"
set dash       = "----------------------------------------"
set line       = "========================================"
set MAKE       = "make"
set get_ver    = "${work_dir}/bin/get_version"

set path       = (/router/bin /usr/cisco/bin /usr/local/bin $path)

set obj_1      = "obj-36-c1000 obj-36-c1005 obj-4k-c4000"
set obj_2      = "obj-4k-c7100 obj-4k-rsp obj-4k-rvip obj-4k-svip"
set obj_3      = "obj-68-as5200 obj-68-c3000 obj-68-c4000 obj-68-c7000"
#set obj_4      = "obj-sp-solaris obj-sp-sunos"
set obj_4      = ""

#set obj_all    = "${obj_1} ${obj_2} ${obj_3} ${obj_4}"
set obj_all    = " "

set rom_obj_1  = "rommon/obj-36-c1000 rommon/obj-4k-c4000 rommon/obj-4k-c7100"
set rom_obj_2  = "rommon/obj-4k-rsp rommon/obj-4k-rsp2 rommon/obj-4k-svip rommon/obj-68-as5200"

set rom_obj_all = "${rom_obj_1} ${rom_obj_2}"


# ===============================================================================
# On POTLICKER:
# 1.  Create directories and update links pointing to latest build output.
# 2.  Make sure build log is up to date.  We keep the older build logs if
#     we need to compile more than once a day.
# ===============================================================================

if ( ${do_create_dir} == "TRUE" ) then
    # -------------------------------------------------------------------------------
    # Set up /cscpu/core_release/suns and /cscpu/core_release/symbols directories.
    # -------------------------------------------------------------------------------
    cd ${work_dir}
    foreach dir ( ${sun_dir}  ${sym_dir} )
        cd ${dir}
        set name = `basename ${dir}`
        set name_date = "${name}.${yymmdd}"

        if ( -e ${name_date} ) then
            ${get_ver} ${name_date}
        endif

        mkdir ${name_date}
        if ( -e ${dir}/current ) then
           /bin/rm -f ${dir}/current
        endif
        ln -s ${name_date} ${dir}/current

        cd ..
    end


    # -------------------------------------------------------------------------------
    # Set up /cscpu/core_release/Builds directory.
    # -------------------------------------------------------------------------------
    cd ${work_dir}/Builds
    if ( -e ${out} ) then
        ${get_ver} ${out}
    endif
    touch ${out}
    
    if ( -e ${work_dir}/Builds/current ) then
       /bin/rm -f ${work_dir}/Builds/current
    endif
    ln -s  ${out} ${work_dir}/Builds/current
    
    
    # -------------------------------------------------------------------------------
    # Set up /cscpu/core_release/Archives directory.
    # -------------------------------------------------------------------------------
    cd ${arch_dir}
    if ( -d images.${yymmdd} ) then
        ${get_ver} images.${yymmdd}
    endif
    mkdir images.${yymmdd}
    
    if ( -e ${arch_dir}/current ) then
       /bin/rm -f ${arch_dir}/current
    endif
    ln -s images.${yymmdd} ${arch_dir}/current
endif


# ===============================================================================
# On POTLICKER, start the build.
#
# If before 5 p.m., adjust the build priority to lower value (see ${nice_val}).
# ===============================================================================
cd ${tree}/sys
echo "++ `date` - Build started."				>>& ${out}
echo ""								>>& ${out}
echo "Current working directory:  ${tree}."			>>& ${out}
echo "Nice build enforced until:  ${nice_time}00 hours."	>>& ${out}
echo ""								>>& ${out}
echo "`/usr/ucb/df .`"						>>& ${out}
echo ""								>>& ${out}
echo ""								>>& ${out}

if ( ${do_sup_clean} == ${clean_day} ) then
    echo "${line}${line}"					>>& ${out}
    echo "++ `date` - make super clean."			>>& ${out}
    echo ""							>>& ${out}
    nice ${nice_val} ${MAKE} -s MAKEFLAG_J=${cpu_val} superclean >>& ${out}
    echo ""							>>& ${out}
    echo ""							>>& ${out}
endif

echo "${line}${line}"						>>& ${out}
if ( ${do_depend} == "TRUE" ) then
    echo "++ `date` - make nodependencies."			>>& ${out}
    echo ""							>>& ${out}
    nice ${nice_val} ${MAKE} -s MAKEFLAG_J=${cpu_val} nodepend	>>& ${out}
    echo ""							>>& ${out}
    echo ""							>>& ${out}
    echo "${line}${line}"					>>& ${out}
    echo "++ `date` - make dependencies."			>>& ${out}
    echo ""							>>& ${out}
    nice ${nice_val} ${MAKE} -s MAKEFLAG_J=${cpu_val} depend	>>& ${out}
    echo ""							>>& ${out}
else
    echo "++ `date` - Skipped make nodepend  & depend."		>>& ${out}
    echo ""							>>& ${out}
endif

echo "${line}${line}"						>>& ${out}
echo "++ `date` - Build images."				>>& ${out}
echo ""								>>& ${out}

# ---------------------------------------------------------------------------
# Building images start here.
# ---------------------------------------------------------------------------
foreach sys_prod ( ${obj_all} )
    cd ${tree}/sys/${sys_prod}
    mkdir -p ${arch_dir}/images.${yymmdd}/${sys_prod}
    echo ""							>>& ${out}
    echo "${dash}${dash}"					>>& ${out}
    echo "++ `date` - Building image ${sys_prod}."		>>& ${out}
    echo ""							>>& ${out}

    #  Example:
    #    nice +10 make  MAKEFLAG_J=-j6 GDB_FLAG= BIN_SUFFIX=.960725 TFTPHOST=potlicker \
    #    TFTPDIR=/cscpu/core_release/Archives/images.960725/${sys_prod}   production
    #
    set mk_flag1 = "GDB_FLAG= BIN_SUFFIX=.${yymmdd} TFTPHOST=${bld_host}"
    set mk_flag2 = "TFTPDIR=${arch_dir}/images.${yymmdd}/${sys_prod}"

    nice ${nice_val} ${MAKE} -s MAKEFLAG_J=${cpu_val} \
	${mk_flag1} ${mk_flag2} production			>>& ${out}

    # ---------------------------------------------------------------------------
    # Special request image builds
    # ---------------------------------------------------------------------------
    if ( ${sys_prod} == "obj-4k-rsp" ) then
	set target = "rsp-tkpgen-mz"
        echo ""							>>& ${out}
        echo "${dash}${dash}"					>>& ${out}
        echo "++ `date` - Special request - ${target}"		>>& ${out}
        echo ""							>>& ${out}
	nice ${nice_val} ${MAKE} -s MAKEFLAG_J=${cpu_val} \
	    ${mk_flag1} ${mk_flag2} ${target}			>>& ${out}
	echo ""							>>& ${out}
    endif

    if ( ( ${sys_prod} == "obj-sp-solaris" ) || ( ${sys_prod} == "obj-sp-sunos" ) ) then
        echo ""							>>& ${out}
        echo "${dash}${dash}"					>>& ${out}
	echo "++ `date` - Building image ${sys_prod}."		>>& ${out}
        echo ""							>>& ${out}
	nice ${nice_val} ${MAKE} -s MAKEFLAG_J=${cpu_val} \
	    ${mk_flag1} ${mk_flag2} oddballs			>>& ${out}
	echo ""							>>& ${out}
    endif

    # ---------------------------------------------------------------------------
    # Copy the *.sun and *.symbols files into directories. 
    # ---------------------------------------------------------------------------
    mkdir -p ${sun_dir}/suns.${yymmdd}/${sys_prod}
    foreach sun ( *.sun )
        cp -pr ${sun} ${sun_dir}/suns.${yymmdd}/${sys_prod}/${sun}-${yymmdd}
    end
    mkdir -p ${sym_dir}/symbols.${yymmdd}/${sys_prod}
    foreach symbol ( *.symbols )
        cp -pr ${symbol} ${sym_dir}/symbols.${yymmdd}/${sys_prod}/${symbol}-${yymmdd}
    end
end
echo ""								>>& ${out}

foreach rom_prod ( ${rom_obj_all} )
    cd ${tree}/sys/${rom_prod}
    mkdir -p ${arch_dir}/images.${yymmdd}/${rom_prod}
    echo ""							>>& ${out}
    echo "${dash}${dash}"					>>& ${out}
    echo "++ `date` - Building image ${rom_prod}."		>>& ${out}
    echo ""							>>& ${out}

    set mk_flag1 = "GDB_FLAG= BIN_SUFFIX=.${yymmdd} TFTPHOST=${bld_host}"
    set mk_flag2 = "TFTPDIR=${arch_dir}/images.${yymmdd}/${rom_prod}"

    nice ${nice_val} ${MAKE} -s MAKEFLAG_J=${cpu_val} \
	${mk_flag1} ${mk_flag2} all				>>& ${out}

    # ---------------------------------------------------------------------------
    # Copy the *.sun and *.symbols files into directories. 
    # ---------------------------------------------------------------------------
    mkdir -p ${sun_dir}/suns.${yymmdd}/${rom_prod}
    foreach sun ( *.sun )
        cp -pr ${sun} ${sun_dir}/suns.${yymmdd}/${rom_prod}/${sun}-${yymmdd}
    end
    mkdir -p ${sym_dir}/symbols.${yymmdd}/${rom_prod}
    foreach symbol ( *.symbols )
        cp -pr ${symbol} ${sym_dir}/symbols.${yymmdd}/${sys_prod}/${symbol}-${yymmdd}
    end
end
echo ""								>>& ${out}


# ===============================================================================
# On POTLICKER, create status message to send to mail aliases.
# ===============================================================================
echo ""								>>& ${out}
echo "${dash}${dash}"						>>& ${out}
echo "`date` - Creating build note."				>>& ${out}
echo ""								>>& ${out}
${work_dir}/bin/create_bld_note ${yymmdd}


# ===============================================================================
# On DIRT:
# 1.  Update soft link to currect potlicker:/cscpu/core_release/Archives directory.
# ===============================================================================
echo ""								>>& ${out}
echo "${dash}${dash}"						>>& ${out}
echo "`date` - Creating soft link on dirt."			>>& ${out}
echo ""								>>& ${out}

cd ${tftp_path}; /bin/rm -f current
cd ${tftp_path}; ln -s ${arch_dir}/images.${yymmdd} ${tftp_path}/current

echo ""								>>& ${out}
echo "`date` - Build completed."				>>& ${out}


END:
